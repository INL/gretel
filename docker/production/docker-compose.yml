version: "3"

# This docker file has two modes
# prod/production and dev/development
# Run them using docker compose up --profile prod/dev.
# If you pass no profile, it will default to prod (or more specifically the profile will be "", which the prod containers will also run in).

# In prod mode, the containers will use their internal files, and the source code is not required
# The data files will live in docker volumes. 
# This means that to completely wipe the data, you must stop the containers, delete the following volumes, then restart the containers:
# (alternatively `docker-compose down -v` should do the trick)
# - gretel-database
# - gretel-uploads
# - gretel-results-cache
# - gretel-basex

# In development mode, the backend containers will have the "backend" directory mounted.
# This means that the uploads, search cache, basex databases, and django database will be in the backend directory.
# This is useful for development, as you can easily inspect the database, and the files that are uploaded.
# Additionally, development mode will open a debugpy port for the backend and celery containers, so you can attach a debugger.
# The ports for this are 5678 for the backend, and 5679 for the celery container.
# The data during development is in these locations:
# - backend/db.sqlite
# - backend/uploaded_treebanks
# - backend/basex-data
# - backend/query_result_cache

# Occasionally the frontend may begin to return 502 bad gateway if you've restarted the backend container.
# This is because the backend container will receive a new IP in the docker network
# And the nginx in the frontend will not renew its dns cache.
# To fix this, simply restart the frontend container.

# If you wish to run the frontend in development/live reload mode, simply run "yarn serve" in the web-ui directory.
# You can then access the frontend on localhost:4200.
# The backend the frontend will connect to can be specified in two ways:
# - by configuring the "django" url in the "config.json" file in the web-ui directory
# - by using the included "proxy.json" file in the web-ui directory. This option requires that the abovementioned "django" url in the "config.json" file is set to "/" (i.e. localhost:4200, where the proxy will also run).




services:

  frontend: 
    container_name: gretel-frontend
    image: ${REGISTRY:-instituutnederlandsetaal}/gretel5-frontend:${version:-latest}
    build: 
      context: ../..
      dockerfile: docker/production/Dockerfile
      target: frontend
    ports: 
      - 80:80
    restart: unless-stopped

  # Backend

  backend:
    profiles: 
      - production
      - prod
      - ""
    container_name: gretel-backend
    image: ${REGISTRY:-instituutnederlandsetaal}/gretel5-backend:${version:-latest}
    build: 
      context: ../..
      dockerfile: docker/production/Dockerfile
      target: backend
    environment: 
      REDIS_HOST: redis
      BASEX_HOST: basex
      ALPINO_HOST: alpino
      DATABASE_PATH: /app/backend/database/db.sqlite3
    volumes: 
      - gretel-database:/app/backend/database/
      - gretel-uploads:/app/backend/uploaded_treebanks/
      - gretel-results-cache:/app/backend/query_result_cache/
    ports: 
      - 8000:8000
    command: bash -c "
      python manage.py migrate && 
      python manage.py runserver 0.0.0.0:8000 --pythonpath .."
    restart: unless-stopped

  backend-dev:
    profiles: 
      - development
      - dev
    container_name: gretel-backend
    image: ${REGISTRY:-instituutnederlandsetaal}/gretel5-backend:${version:-latest}-dev
    build: 
      context: ../..
      dockerfile: docker/production/Dockerfile
      target: backend
  
    environment: 
      REDIS_HOST: redis
      BASEX_HOST: basex-dev
      ALPINO_HOST: alpino
    ports: 
      - 5678:5678
      - 8000:8000
    volumes: 
      - ../../backend:/app/backend
    # need to run migrations (which inits db) because we overwrite the database file with the volume.
    command: bash -c "
      python manage.py migrate && 
      python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 manage.py runserver 0.0.0.0:8000 --pythonpath .."
    restart: unless-stopped

  # Celery

  celery: 
    profiles: 
      - production
      - prod
      - ""
    container_name: gretel-celery
    image: ${REGISTRY:-instituutnederlandsetaal}/gretel5-backend:${version:-latest}
    build: 
      context: ../..
      dockerfile: docker/production/Dockerfile
      target: backend
    # Same env as backend as we are basically a duplicate
    environment: 
      REDIS_HOST: redis
      BASEX_HOST: basex
      ALPINO_HOST: alpino
      DATABASE_PATH: /app/backend/database/db.sqlite3
    volumes: 
      - gretel-database:/app/backend/database/
      - gretel-uploads:/app/backend/uploaded_treebanks/
      - gretel-results-cache:/app/backend/query_result_cache/
    command: bash -c "python -m celery -A gretel.celery worker -l info"
    restart: unless-stopped

  celery-dev: 
    profiles: 
      - development
      - dev
    container_name: gretel-celery
    image: ${REGISTRY:-instituutnederlandsetaal}/gretel5-backend:${version:-latest}-dev
    build: 
      context: ../..
      dockerfile: docker/production/Dockerfile
      target: backend
    volumes: 
      - ../../backend:/app/backend
    # Same env as backend as we are basically a duplicate
    environment: 
      REDIS_HOST: redis
      BASEX_HOST: basex-dev
      ALPINO_HOST: alpino
    ports: 
      - 5679:5679
    command: bash -c "python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5679 -m celery -A gretel.celery worker -l info -P solo"
    restart: unless-stopped

  alpino:
    container_name: gretel-alpino
    image: registry.webhosting.rug.nl/compling/alpino:latest
    environment:
      - PROLOGMAXSIZE=1500M
    expose:
      - 7001 # for posterity
    command: Alpino -notk -veryfast user_max=600000 server_kind=parse server_port=7001 assume_input_is_tokenized=on debug=0 end_hook=xml -init_dict_p batch_command=alpino_server
    restart: unless-stopped

  redis:
    container_name: gretel-redis
    image: redis:7-alpine
    restart: unless-stopped

  # BaseX

  basex-dev: 
    container_name: gretel-basex
    profiles: 
      - development
      - dev
    image: ${REGISTRY:-instituutnederlandsetaal}/gretel5-basex:${version:-latest}-dev
    build: 
      context: ../..
      dockerfile: docker/production/Dockerfile.basex
    volumes:
      - ../../backend/basex-data:/data
    restart: unless-stopped

  basex:
    container_name: gretel-basex
    profiles: 
      - production
      - prod
      - ""
    image: ${REGISTRY:-instituutnederlandsetaal}/gretel5-basex:${version:-latest}
    build: 
      context: ../..
      dockerfile: docker/production/Dockerfile.basex
    volumes:
      - gretel-basex:/data
    restart: unless-stopped

volumes: 
  gretel-basex:
  gretel-database:
  gretel-uploads:
  gretel-results-cache: